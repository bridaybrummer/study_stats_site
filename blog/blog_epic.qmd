---
title: "Cape Epic 2025 Analysis"
excerpt: "An analysis of the Cape Epic 2025 results"
date: "2025-03-28"
categories: [Blog, Sport, Cycling]
format:
    html:
        css: 
        - ../styles.css  # optional custom styling for posts
       # - styles_blog.css          # Blog-specific overrides
        resources:
        - shinylive-sw.js
filters:
  - shinylive
height: 10000
echo: false
---

```{r}
#| include: false

library(NMCleaner)
conflicted::conflicts_prefer( dplyr::filter)

```
# Epic 2025 Analysis
Here is my take on some analyses of the Cape Epic results, through the eyes of en epidemiologist-competitor, if you will. 

## Intention

As a particpant and epidemiologist myself, I was interested in a new analysis challenge. This is one of those thinsg of when you are chatting in the car on the way back from Stage 7 saying, "flip, I wonder how many guys got chicked on *that* stage", "who had the most consistent race", and instead of just forgetting about it, I took it a bit further. While some of these questions are answered just by assuming what happened to the top teams on TV, I also wanted to place us mere-mortals into context. As a particpant myself, these are some of the questions I had.

In summary, I wanted to know: 
- the "real" mortality rate of riders
- the average time of categories 
- A tool to track your position over the stages compared to another team. 
- How well does prologue time predict overall performance? 
- The number of riders per capita from each country. 
  
While other, more in depth, analyses are possible, I am limited by the data availble online and my real job. 

## Data Collection 

Data was scraped from the results page on the Cape Epic website using Selenium. Numbers may vary slighlty from official ones reported by the Cape Epic. At the time of scraping, some data on riders was not available.

# The real mortality rate 
The Epic organisers usually report the drop out rate as the drop out rate of teams. While the epic is a *team* event, the drop out rate of individuals is much less. I present the survival rate of individuals and teams.


```{r}
#| label: tbl-mortality_rate_by_team
#| tbl-cap: Comparison of the reported Survival Rate reported by Epic and by the actual survival of individual riders
#| layout-ncol: 2
#| tbl-subcap: 
#|      - "Mortality rate by team"
#|      - "Mortality rate by rider"

load("outputs/team_mortality_table.rda")
load("outputs/rider_mortality_table.rda")

# mortality rate by team
team_mortality_table %>%
    flextable::set_table_properties(
        width = 0.75, layout = "autofit"
    )

# mortality rate by rider
rider_mortality_table %>%
    flextable::set_table_properties(
        width = 0.75, layout = "autofit"
    )
```


# How many riders get chicked?

Getting chicked is, colloquially, when a male rider is slower than a female rider. The Cape Epic is one fo the few events where Male and Femalre riders ride the exact same course (and it failry similar times), unlike Cape Town Cycle Tour or Tour De Femmes. There is emerging data that females may be better at handling fatigue than males. 

```{r}
#| label: tbl-chicked
#| tbl-cap: Comparing how many riders get chiked by the fastest and sloest UCI women
#| layout-nrow: 2
#| tbl-subcap:
#|        - "Proportion of riders who got chicked by the fastest UCI team"
#|        - "Proportion of riders who got chicked by the slowest UCI team"

load("outputs/chicked_table_fastest_UCI_women.rda")
chicked_table_fastest_UCI_women

load("outputs/chicked_table_slowest_UCI_women.rda")
chicked_table_slowest_UCI_women

```

# Track the performance of your team over the stages

If you are interested to see how you paced compared to another team, or the pros, you can use the app below. 

```{shinylive-r}
#| standalone: true
#| echo: false
#| messages: false
#| viewerHeight: 1200

library(shiny)
library(tidyverse)
library(DT)

# Load from GitHub
data_url <- "https://raw.githubusercontent.com/bridaybrummer/study_stats_site/main/data/df_full.csv"
df_full <- read_csv(data_url)

# Treat stage as ordered factor only once
stage_levels <- c(
    "Prologue", "Stage 1", "Stage 2", "Stage 3", "Stage 4",
    "Stage 5", "Stage 6", "Stage 7", "Overall"
)

category_colors <- c(
    "UCI Men" = "#1f77b4", # Blue
    "Individual Finishers" = "#7f7f7f", # Grey
    "Masters Men" = "#2ca02c", # Green
    "Open Men" = "#ff7f0e", # Orange
    "Grand Masters Men" = "#9467bd", # Purple
    "UCI Women" = "#e377c2", # Pink
    "Mixed" = "#bcbd22", # Olive
    "Great Grand Masters Men" = "#8c564b", # Brown
    "Open Women" = "#17becf", # Teal
    "Masters Women" = "#d62728" # Red
)

df_full <- df_full %>%
    mutate(stage = factor(stage, levels = stage_levels))

ui <- fluidPage(
    titlePanel("Team Position by Stage"),
    tags$head(
        tags$style(HTML("
            div.top-left {
            float: left;
            }
            div.dataTables_filter {
            text-align: left !important;
            }
        "))
    ),
    tags$script(HTML("
    setTimeout(function() {
      document.querySelector('h4').innerText = 'Ready to explore your race story? 🚴‍♀️✨';
    }, 4000);
  ")),
    sidebarLayout(
        sidebarPanel(
            h4("Welcome! 👋"),
            helpText(
                "This app visualises stage-by-stage team positions.",
                "➤ Select your team and compare it to another — e.g., Like the Ladies African Jersey winners (Team 62)",
                "➤ If you cant remember your team number, search the table to find team numbers by name or team.",
                "➤ Only categories of the selected teams are shown (others greyed out)."
            ),
            numericInput("selected_team", "Enter a team number (dashed):",
                value = 188,
                min = min(df_full$team_number),
                max = max(df_full$team_number)
            ),
            numericInput("selected_team_2", "Compare With Team Number(dotted):",
                value = 62,
                min = min(df_full$team_number),
                max = max(df_full$team_number)
            ),
            verbatimTextOutput("category_text")
        ),
        mainPanel(
            h5("🔍 Search for a Rider or Team:"),
            helpText("E.g., search 'HoneyComb' or your team name."),
            DTOutput("team_table"),
            plotOutput("team_plot", height = "500px")
        )
    )
)

# Server
server <- function(input, output) {
    output$team_table <- renderDT({
        df_full %>%
            select(team_number, team, rider, category) %>%
            distinct() %>%
            datatable(
                options = list(
                    pageLength = 5,
                    lengthChange = FALSE,
                    dom = '<"top-left"f>tip', # 'f' = search box, now wrapped in a class
                    scrollY = "200px",
                    scrollCollapse = TRUE
                ),
                rownames = FALSE,
                class = "compact stripe"
            )
    })

    output$team_plot <-
        renderPlot({
            req(input$selected_team, input$selected_team_2)

            team1 <- input$selected_team
            team2 <- input$selected_team_2

            selected_team <- input$selected_team
            selected_team_2 <- input$selected_team_2


            selected_category_1 <- df_full %>%
                filter(team_number == selected_team) %>%
                pull(category) %>%
                unique()

            selected_category_2 <- df_full %>%
                filter(team_number == selected_team_2) %>%
                pull(category) %>%
                unique()

            cat1 <- df_full %>%
                filter(team_number == team1) %>%
                pull(category) %>%
                unique()

            cat2 <- df_full %>%
                filter(team_number == team2) %>%
                pull(category) %>%
                unique()


            selected_cats <- unique(c(cat1, cat2))

            selected_categories <- unique(c(selected_category_1, selected_category_2))

            output$category_text <- renderText({
                paste("Category of Team 1:", cat1, "\nCategory of Team 2:", cat2)
            })

            top_category <- df_full %>%
                group_by(category, stage) %>%
                slice_min(position, with_ties = FALSE) %>%
                ungroup()

            top_ids <- top_category %>%
                mutate(stage = as.character(stage)) %>%
                transmute(top_id = paste(team_number, stage)) %>%
                pull(top_id)

            df_plot <- df_full %>%
                mutate(
                    focus = case_when(
                        team_number == selected_team ~ "Team 1",
                        team_number == selected_team_2 ~ "Team 2",
                        TRUE ~ "Other"
                    ),
                    # top_team = paste(team_number, stage) %in% top_ids,
                    category_plot = ifelse(category %in% selected_categories, category, "Other"),
                    alpha_level = ifelse(focus %in% c("Team 1", "Team 2"), 1,
                        ifelse(category %in% selected_categories, 0.2, 0.05)
                    ),
                    stage = factor(stage, levels = c(
                        "Prologue", "Stage 1", "Stage 2", "Stage 3", "Stage 4",
                        "Stage 5", "Stage 6", "Stage 7", "Overall"
                    ))
                ) %>%
                mutate(
                    stage_chr = as.character(stage),
                    focus = case_when(
                        team_number == team1 ~ "Team 1",
                        team_number == team2 ~ "Team 2",
                        TRUE ~ "Other"
                    ),
                    color_group = ifelse(category %in% selected_cats, category, "Other"),
                    color_val = case_when(
                        color_group == "Other" ~ "grey80",
                        color_group == selected_category_1 ~ category_colors[selected_category_1],
                        color_group == selected_category_2 ~ category_colors[selected_category_2],
                    ),
                    alpha_val = case_when(
                        focus %in% c("Team 1", "Team 2") ~ 1,
                        color_group == "Other" ~ 0.1,
                        TRUE ~ 0.3
                    ),
                    size_val = case_when(
                        focus %in% c("Team 1", "Team 2") ~ 1.2,
                        TRUE ~ 0.4
                    ),
                    linetype_val = case_when(
                        focus == "Team 1" ~ "dashed",
                        focus == "Team 2" ~ "dotted",
                        TRUE ~ "solid"
                    )
                ) %>%
                mutate(
                    stage = factor(
                        stage,
                        levels = stage_levels
                    )
                )


            ggplot(df_plot, aes(x = stage, y = -position, group = team)) +
                geom_line(aes(
                    color = color_val, alpha = alpha_val,
                    linetype = linetype_val, size = size_val
                )) +
                geom_point(aes(color = color_val, alpha = alpha_val), size = 0.5) +
                ggrepel::geom_text_repel(
                    data = df_plot %>%
                        filter(team_number %in% c(team1, team2)) %>%
                        group_by(team_number) %>%
                        filter(as.numeric(factor(stage_chr, levels = stage_levels)) == max(as.numeric(factor(stage_chr, levels = stage_levels)))),
                    aes(label = paste0("Team ", team_number)),
                    nudge_x = 0.2,
                    direction = "y",
                    size = 4,
                    hjust = 0,
                    segment.color = "grey50"
                ) +
                scale_size_identity() +
                scale_alpha_identity() +
                scale_linetype_identity() +
                scale_color_identity() +
                scale_x_discrete(
                    # create more space on the right side of the plot
                    expand = expansion(mult = c(0.1, 0.2))
                ) +
                labs(
                    x = "Stage",
                    y = "Position (higher is better)",
                    title = "Team Position by Stage",
                    subtitle = "Selected categories are shown in a bold dot-dahsed line. The rest of the category of the selected teams are show in a thin solid line in the same colour. All other categories are in a faint grey line."
                ) +
                theme_minimal() +
                theme(legend.position = "bottom")
        })
}

# Run app
shinyApp(ui, server)
```

# Average time of categories

As an oveall category, the average time of each category is shown below. This unfrotunately, doesn't do a good job of showing the other races that were happening within these categories. 

```{r}
#| label: fig-cumulative_time_plot
#| fig-cap: Probability density function of the cumulative time of each category. The x-axis is the cumulative time in seconds and the y-axis is the probability density function. The lines are smoothed using a Gaussian kernel density estimate. 
#| warning: false
#| error: false
#| message: false


load("outputs/cumulative_time_plot.rda")
cumulative_time_plot

```

```{r}
#| label: tbl-mean_time_category_tbl
#| tbl-cap: Table of the mean time of each category. The table shows the mean time in minutes of each category and stage.

load(
    "outputs/mean_time_category_tbl.rda"
)
mean_time_category_tbl
```

# Who what and where
Which country had the higest per capita number of epic riders form their country? 

```{r}
#| label: tbl-riders_per_1_mil_table
#| tbl-cap: Table of riders per 1 million population of their country


load("outputs/riders_per_1_mil_table.rda")
riders_per_1_mil_table %>%
    flextable::set_table_properties(
        width = 0.75, layout = "autofit"
    )
```

@tbl-riders_per_1_mil_table is sorted by the highest per capita of riders. Very small countries naturally skew results, however, teams from Switzerland, Namibia, Costa Rica and New Zealand deserve a special mention

# How well does prologe result predict overall result? 
We all know the saying "You don't win on the prologue, but you can lose", to me this is essentially saying, your prologue doesn't predict your overall performance. 

```{r}
#| label: fig-prologue_overall_table
#| fig-cap: Scatter plot of prologue vs Overall time.


load("outputs/prologue_vs_stage_1_plot.rda")

prologue_vs_stage_1_plot
```

In @fig-prologue_overall_table, the red line is the 1:1 line, where the prologue time is equal to the overall time. Those on the right of the red line indicate that riders that had a better placement overall than their prologue position. Those on the left of the red line indicate that riders that had a worse placement overall than their prologue position.

```{r}
#| label: tbl-prediction_accuracy_table
#| tbl-cap: Table of the prediction accuracy of the prologue time to predict overall time. The table shows the number of teams that were predicted correctly within a certain tolerance.


load("outputs/prediction_accuracy_table.rda")
prediction_accuracy_table
 

```
@tbl-prediction_accuracy_table shows two metrics , Spearman's correlation and R^2. These two metrics show that prologue positions and overall position are quite strongly correlated, although this correlation decreased over the stages. Neither of these metrics account for small changes in position, which may not show well when analyzing all riders, but for the individual riders, it is quite important."

```{r}
#| label: tbl-position_accuracy_table
#| tbl-cap: Table the number of teams that had th same posiiton from the prolgue to overall.
#| include: false 
load("outputs/position_accuracy_table.rda")
position_accuracy_table
```


```{r}
#| label: fig-accuracy_plot
#| fig-cap: The accuracy of predicting the position of a team based on the prologue time. 
load("outputs/accuracy_plot.rda")
accuracy_plot
```

@fig-accuracy_plot reports on the accuracy of predicting the position of a team based on the prologue time. The X-axis is the tolerance of the prediction. A tolerance of 100 means that the predicted position is within 100 positions of the actual position. The Y-axis is the proportion of teams that were predicted correctly. Accuracy in this case is calculated as the proportion of correct predictions. 
