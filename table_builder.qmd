---
title: "Table builder"
format: 
  html:
    resources: 
      - shinylive-sw.js
filters:
  - shinylive
height: 10000
---


```{shinylive-r}
#| standalone: true
#| echo: false
#| messages: false
#| viewerHeight: 800


# app.R

# Load required libraries
library(shiny)
library(dplyr)
library(gtsummary)
library(gt)
library(DT)

# Load the trial dataset from the gtsummary package
data("trial", package = "gtsummary")

ui <- fluidPage(
  titlePanel("Dummy Table Maker with gtsummary"),
  sidebarLayout(
    sidebarPanel(
      h4("Dataset Exploration"),
      # Show the structure of the full dataset
      verbatimTextOutput("structure_output"),
      
      h4("Variable Selection"),
      # Allow user to select variables for the summary table
      checkboxGroupInput(
        inputId = "selected_vars", 
        label = "Select Variables:",
        choices = names(trial),
        selected = names(trial)
      ),
      
      h4("Filtering Options"),
      # Provide a slider to filter on the numeric variable "age"
      sliderInput(
        inputId = "age_filter", 
        label = "Filter by Age:",
        min = min(trial$age, na.rm = TRUE),
        max = max(trial$age, na.rm = TRUE),
        value = c(min(trial$age, na.rm = TRUE), max(trial$age, na.rm = TRUE))
      ),
      
      h4("Grouping Options"),
      # Optionally group the summary table by a chosen variable
      selectInput(
        inputId = "group_var", 
        label = "Group by:",
        choices = c("None", names(trial)),
        selected = "None"
      ),
      
      h4("Download Options"),
      # Download button to export the filtered data as CSV
      downloadButton("download_csv", "Download Filtered Data (CSV)")
    ),
    
    mainPanel(
      tabsetPanel(
        tabPanel("Data Preview",
                 h4("Dataset Structure (via glimpse)"),
                 verbatimTextOutput("dataset_structure"),
                 h4("Data Preview (first few rows)"),
                 DTOutput("data_preview")
        ),
        tabPanel("Summary Table",
                 # Display the gtsummary table (converted to a gt table)
                 gt_output("summary_table")
        ),
        tabPanel("Visualization",
                 # Simple plot output (e.g., histogram of age)
                 plotOutput("plot")
        )
      )
    )
  )
)

server <- function(input, output, session) {
  
  # Reactive: filter the trial dataset based on the age slider input
  filtered_data <- reactive({
    req(input$age_filter)
    trial %>%
      filter(age >= input$age_filter[1], age <= input$age_filter[2])
  })
  
  # Reactive: select the filtered dataset with only the chosen variables
  selected_data <- reactive({
    req(input$selected_vars)
    filtered_data() %>%
      select(all_of(input$selected_vars))
  })
  
  # Output the full dataset structure using str()
  output$structure_output <- renderPrint({
    str(trial)
  })
  
  # Also output a glimpse of the dataset for a concise view
  output$dataset_structure <- renderPrint({
    dplyr::glimpse(trial)
  })
  
  # Render a preview (head) of the selected data using DT for interactivity
  output$data_preview <- renderDT({
    datatable(head(selected_data()), options = list(pageLength = 5))
  })
  
  # Render the summary table using gtsummary
  output$summary_table <- render_gt({
    # Check if grouping is selected (i.e., not "None")
    if (input$group_var == "None") {
      tbl <- selected_data() %>%
        tbl_summary(
          missing = "no",
          statistic = list(
            all_continuous() ~ "{mean} ({sd})",
            all_categorical() ~ "{n} / {N} ({p}%)"
          )
        )
    } else {
      # Ensure the grouping variable is included in the dataset.
      # If not, add it from the filtered dataset.
      if (!(input$group_var %in% input$selected_vars)) {
        dt <- filtered_data() %>% 
          select(all_of(c(input$group_var, input$selected_vars)))
      } else {
        dt <- selected_data()
      }
      tbl <- dt %>%
        tbl_summary(
          by = input$group_var,
          missing = "no",
          statistic = list(
            all_continuous() ~ "{mean} ({sd})",
            all_categorical() ~ "{n} / {N} ({p}%)"
          )
        )
    }
    
    # Optionally add overall summary statistics and convert to a gt table for display
    tbl %>%
      add_overall() %>%
      as_gt()
  })
  
  # Render a simple histogram of the "age" variable as a visualization example
  output$plot <- renderPlot({
    data_plot <- filtered_data()
    if ("age" %in% names(data_plot)) {
      hist(
        data_plot$age, breaks = 10, col = "skyblue",
        main = "Age Distribution", xlab = "Age"
      )
    } else {
      # If "age" is not among the selected variables, display a placeholder
      plot.new()
      text(0.5, 0.5, "Age variable not available for plotting", cex = 1.2)
    }
  })
  
  # Download handler to export the currently selected (filtered) data as a CSV file
  output$download_csv <- downloadHandler(
    filename = function() {
      paste("filtered_trial_data_", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(selected_data(), file, row.names = FALSE)
    }
  )
}

# Run the Shiny app
shinyApp(ui, server)



```